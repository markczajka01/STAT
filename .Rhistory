# Default knitting options
knitr::opts_chunk$set(echo=FALSE,
# echo=TRUE, # Echo the code
# tidy=TRUE, # Nicely dity up code
warning=FALSE, # No warnings please
message=FALSE) # No messages please
options(warn=-1)
# Suppress start up warnings when loading libraries
library <- function(...) {
suppressPackageStartupMessages(base::library(...))
}
install.packages("pROC")
# Load in all libraries
library(tidyverse)
library(here) # directory referencing
library(MASS)
library(nnet)
# library(randomForest)
library(caret)
library(stargazer) # used by John for nice display of model output
library(knitr) # used for nice display of tables
library(pROC)
predicted_probabilities <- predict(model_glm, type = "response")
model_glm <- glm(LDLNTR ~  WHOLGR1N + REFGRA1N + BMISC + AGEC + SLPTIME + SYSTOL + EXLWTBC, family = "binomial", data = model_data)
load(file = here("data", "model_data.Rdata"))
model_glm <- glm(LDLNTR ~  WHOLGR1N + REFGRA1N + BMISC + AGEC + SLPTIME + SYSTOL + EXLWTBC, family = "binomial", data = model_data)
predicted_probabilities <- predict(model_glm, type = "response")
predicted_probabilities <- predict(model_glm, type = "response")
roc_data <- roc(actual_outcomes, predicted_probabilities)
predicted_probabilities <- predict(model_glm, type = "response")
roc_data <- roc(LDLNTR, predicted_probabilities)
predicted_probabilities <- predict(model_glm, type = "response")
roc_data <- roc(model_data$LDLNTR, predicted_probabilities)
predicted_probabilities <- predict(model_glm, type = "response")
roc_data <- roc(model_data$LDLNTR, predicted_probabilities)
plot(roc_data, main = "ROC Curve", col = "blue")
predicted_probabilities <- predict(model_glm, type = "response")
roc_data <- roc(model_data$LDLNTR, predicted_probabilities)
plot(roc_data, main = "ROC Curve", col = "blue")
auc_score <- auc(roc_data)
predicted_probabilities <- predict(model_glm, type = "response")
roc_data <- roc(model_data$LDLNTR, predicted_probabilities)
plot(roc_data, main = "ROC Curve", col = "blue")
auc_score <- auc(roc_data)
print(paste("AUC:", auc_score))
predicted_probabilities <- predict(model_glm, type = "response")
roc_data <- roc(model_data$LDLNTR, predicted_probabilities)
plot(roc_data, main = "ROC Curve", col = "blue")
auc_score <- auc(roc_data)
print(paste("AUC:", auc_score))
model_data$LDLRESB
install.packages(rms)
install.packages("rms")
# Load in all libraries
library(tidyverse)
library(here) # directory referencing
library(MASS)
library(nnet)
# library(randomForest)
library(caret)
library(stargazer) # used by John for nice display of model output
library(knitr) # used for nice display of tables
library(pROC)
library(rms)
ordinal_1 <- polr(LDLRESB ~ WHOLGR1N + REFGRA1N + BMISC + AGEC + SLPTIME + SYSTOL + EXLWTBC, data = model_data)
ctable <- coef(summary(ordinal_1))
p <- pnorm(abs(ctable[, "t value"]), lower.tail = FALSE) * 2
ctable <- cbind(ctable, "p value" = p)
kable(ctable,digits=2, format = "pipe")
validation_result <- validate(ordinal_1, B = 100)  # B is the number of bootstrap resamples
validation_result <- validate(ordinal_1, B = 100)  # B is the number of bootstrap resamples
val_index <- val.prob(ord_model)
lrm(ordinal_1)
# Load in all libraries
library(tidyverse)
library(here) # directory referencing
library(MASS)
library(nnet)
# library(randomForest)
library(caret)
library(stargazer) # used by John for nice display of model output
library(knitr) # used for nice display of tables
library(pROC)
library(rms)
install.packages("rms")
install.packages("rms")
# Default knitting options
knitr::opts_chunk$set(echo=FALSE,
# echo=TRUE, # Echo the code
# tidy=TRUE, # Nicely dity up code
warning=FALSE, # No warnings please
message=FALSE) # No messages please
options(warn=-1)
# Suppress start up warnings when loading libraries
library <- function(...) {
suppressPackageStartupMessages(base::library(...))
}
# Load in all libraries
library(tidyverse)
library(here) # directory referencing
library(MASS)
library(nnet)
# library(randomForest)
library(caret)
library(stargazer) # used by John for nice display of model output
library(knitr) # used for nice display of tables
library(pROC)
library(rms)
install.packages("kableExtra")
# Load in all libraries
library(tidyverse)
library(here) # directory referencing
library(MASS)
library(nnet)
# library(randomForest)
library(caret)
library(stargazer) # used by John for nice display of model output
library(knitr) # used for nice display of tables
library(pROC)
library(rms)
validation_result <- validate(ordinal_1, B = 100)  # B is the number of bootstrap resamples
install.packages("vcd")
# Load in all libraries
library(tidyverse)
library(here) # directory referencing
library(MASS)
library(nnet)
# library(randomForest)
library(caret)
library(stargazer) # used by John for nice display of model output
library(knitr) # used for nice display of tables
library(pROC)
library(rms)
library(vcd)
vcd::vcd(ordinal_1)
plot(ordinal_1,which=4,id.n=5)
predicted_probabilities <- predict(model_glm, type = "response")
roc_data <- roc(model_data$LDLNTR, predicted_probabilities)
plot(roc_data, main = "ROC Curve", col = "blue")
auc_score <- auc(roc_data)
print(paste("AUC:", auc_score))
nom_nom_1 <- multinom(LDLRESB ~ WHOLGR1N + REFGRA1N + BMISC + AGEC + SLPTIME + SYSTOL + EXLWTBC, data = model_data, trace=FALSE)
kable(coef(summary(nom_nom_1)), digits = 4, format="pipe", caption = "Coefficients")
# calculate p-values
zvalues <- summary(nom_nom_1)$coefficients / summary(nom_nom_1)$standard.errors
kable(pnorm(abs(zvalues), lower.tail=FALSE)*2, digits = 2, format="pipe", caption = "P values")
plot(model_glm,which=4,id.n=5)
summary(ordinal_1)
summary(ordinal_1)
boot_model <- Boot(ordinal_1, R = 1000)
install.packages("Boot")
# Load in all libraries
library(tidyverse)
library(here) # directory referencing
library(MASS)
library(nnet)
# library(randomForest)
library(caret)
library(stargazer) # used by John for nice display of model output
library(knitr) # used for nice display of tables
library(pROC)
library(rms)
library(vcd)
library(boot)
summary(ordinal_1)
boot_model <- Boot(ordinal_1, R = 1000)
# Load in all libraries
library(tidyverse)
library(here) # directory referencing
library(MASS)
library(nnet)
# library(randomForest)
library(caret)
library(stargazer) # used by John for nice display of model output
library(knitr) # used for nice display of tables
library(pROC)
library(rms)
library(vcd)
library(boot)
summary(ordinal_1)
boot_model <- Boot(ordinal_1, R = 1000)
summary(ordinal_1)
boot_model <- boot(ordinal_1, R = 1000)
get_coefs <- function(model_data, indices) {
d <- data[indices, ]
fit <- polr(LDLRESB ~ WHOLGR1N + REFGRA1N + BMISC + AGEC + SLPTIME + SYSTOL + EXLWTBC, data = model_data)
return(coef(fit))
}
get_coefs <- function(model_data, indices) {
d <- data[indices, ]
fit <- polr(LDLRESB ~ WHOLGR1N + REFGRA1N + BMISC + AGEC + SLPTIME + SYSTOL + EXLWTBC, data = model_data)
return(coef(fit))
}
bootstrap_results <- boot(data = your_data, statistic = get_coefs, R = 1000)
get_coefs <- function(model_data, indices) {
d <- data[indices, ]
fit <- polr(LDLRESB ~ WHOLGR1N + REFGRA1N + BMISC + AGEC + SLPTIME + SYSTOL + EXLWTBC, data = model_data)
return(coef(fit))
}
bootstrap_results <- boot(data = model_data, statistic = get_coefs, R = 1000)
get_coefs <- function(model_data, indices) {
d <- data[indices, ]
fit <- polr(LDLRESB ~ WHOLGR1N + REFGRA1N + BMISC + AGEC + SLPTIME + SYSTOL + EXLWTBC, data = d)
return(coef(fit))
}
bootstrap_results <- boot(data = model_data, statistic = get_coefs, R = 1000)
get_coefs <- function(model_data, indices) {
d <- model_data[indices, ]
fit <- polr(LDLRESB ~ WHOLGR1N + REFGRA1N + BMISC + AGEC + SLPTIME + SYSTOL + EXLWTBC, data = d)
return(coef(fit))
}
bootstrap_results <- boot(data = model_data, statistic = get_coefs, R = 1000)
get_coefs <- function(model_data, indices) {
d <- model_data[indices, ]
fit <- polr(LDLRESB ~ WHOLGR1N + REFGRA1N + BMISC + AGEC + SLPTIME + SYSTOL + EXLWTBC, data = d)
return(coef(fit))
}
bootstrap_results <- boot(data = model_data, statistic = get_coefs, R = 100)
print(bootstrap_results)
set.seed(2023)
get_coefs <- function(model_data, indices) {
d <- model_data[indices, ]
fit <- polr(LDLRESB ~ WHOLGR1N + REFGRA1N + BMISC + AGEC + SLPTIME + SYSTOL + EXLWTBC, data = d)
return(coef(fit))
}
bootstrap_results <- boot(data = model_data, statistic = get_coefs, R = 100)
print(bootstrap_results)
bca_intervals <- boot.ci(bootstrap_results, type = "bca")$bca[, 4:5]
print(bootstrap_results)
lower_bound <- quantile(bootstrap_coefficients, 0.025)  # 2.5th percentile
bootstrap_coefficients <- bootstrap_results$t[2, ]
bootstrap_coefficients <- bootstrap_results$t[2, ]
print(bootstrap_coefficients)
bootstrap_coefficients <- bootstrap_results$t[2, ]
lower_bound <- quantile(bootstrap_coefficients, 0.025)  # 2.5th percentile
upper_bound <- quantile(bootstrap_coefficients, 0.975)  # 97.5th percentile
confidence_interval <- c(lower_bound, upper_bound)
bootstrap_coefficients <- bootstrap_results$t[2, ]
lower_bound <- quantile(bootstrap_coefficients, 0.025)  # 2.5th percentile
upper_bound <- quantile(bootstrap_coefficients, 0.975)  # 97.5th percentile
confidence_interval <- c(lower_bound, upper_bound)
print(confidence_interval)
bootstrap_coefficients <- bootstrap_results$t[2, ]
lower_bound <- quantile(bootstrap_coefficients, 0.025)  # 2.5th percentile
upper_bound <- quantile(bootstrap_coefficients, 0.975)  # 97.5th percentile
confidence_interval <- c(lower_bound, upper_bound)
print(confidence_interval)
print(bootstrap_results)
